{
  "name": "restly",
  "version": "0.1.11",
  "description": "Lightweight, self documenting REST API framework, based on Express",
  "main": "restly.js",
  "dependencies": {
    "express": "~3.4.0",
    "moment": "~2.2.1",
    "string": "~1.5.1",
    "underscore": "~1.5.2",
    "pug": "2.0.4",
    "async": "~0.2.9",
    "hiredis": "~0.5.0",
    "redis": "~0.8.4",
    "async-stacktrace": "0.0.2",
    "passport": "0.1.17",
    "passport-http": "0.2.2"
  },
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/MattCollins84/restly.git"
  },
  "keywords": [
    "REST",
    "API",
    "RESTFUL",
    "express",
    "framework"
  ],
  "author": {
    "name": "Matt Collins"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/MattCollins84/restly/issues"
  },
  "readme": "# RESTly\n\nSimple and lightweight self-documenting REST API framework based on Express.\n\n#### Features\n* Define your own routes\n* All parameter validation handled for you\n* Interactive docs for your API\n* Custom authentication for selected routes\n* Caching\n* Based on Express, use any existing Express middleware\n\n#### Coming soon\n* Better documentation\n* Better parameter validation\n* Better error catching and general improvements\n* Make a request..!\n\n## Quick start\n\nFirst up, install RESTly:\n```\nnpm install restly\n```\n\nThen, create a routes file, in JSON (routes.json), where you will define your first API:\n\n```\n{\n  \"routes\": [\n    {\n      \"title\": \"Example API call\",\n      \"description\": \"Example API call\",\n      \"section\": \"General API Calls\",\n      \"endpoint\": \"/example\",\n      \"method\": \"get\",\n      \"library\": \"example.js\",\n      \"callback\": \"getExample\",\n      \"parameters\": {\n        \"foo\": {\n          \"required\": true,\n          \"type\": \"string\",\n          \"regex\": false,\n          \"description\":\"My very own parameter\",\n          \"example\":\"bar\"\n        }\n      }\n    }\n  ]\n}\n```\n\nNext create your module to handle the request (lib/example.js).\n\nEach callback will be passed two parameters:\n* opts - a key/value object containing all the supplied values\n* callback - callback function, with the first arguement being an error, while the second is the response data\n\n```\nvar getExample = function(opts, callback) {\n  return callback(null, {foo: opts.foo});\n}\n\nmodule.exports = {\n  getExample: getExample\n}\n```\n\nAnd finally, set up your new API - telling restly where your routes file and libraries are located:\n```\nvar restly = require('restly');\nrestly.init('./routes.json', {lib: \"includes/\"});\n```\n\nAccess this route via a HTTP get:\n\n```\nCURL -X GET 'http://localhost:8000?foo=bar'\n```\n\n## More options\nWhen you init RESTly, you can supply several options to customise your API. The init function takes two parameters:\n* __routes__ - path to the routes file, relative to the file calling it\n* __options__ (optional) - customisable options, defaults shown below\n\n```\n{\n  lib: \"\", // directory that contains your libraries\n  protocol: \"http\", // public protocol, can be http or https (for generating example curl requests in docs)\n  domain: \"localhost\", // public domain (for generating example curl requests in docs)\n  port: 8000, // public port (for generating example curl requests in docs)\n  name: \"My API\", // Name of the API, for building the docs\n  description: \"Interactive API docs\", // Description, again for docs\n  docs_endpoint: \"/\", // the location to access the docs from\n  caching: false // whether to enable caching or not (bool)\n}\n```\n\n## Defining routes\nEach route has a number of parameters that can be used to define it:\n\n* __title__ - short description\n* __description__ - longer description\n* __section__ - the group of API calls this belongs to\n* __endpoint__ - the endpoint to use to access this API (in express format)\n* __method__ - HTTP method (GET/POST/PUT/DELETE)\n* __library__ - the .js library that contains the callback to execute\n* __callback__ - the Javascript function to use as the callback\n* __parameters__ - Javascript object defining parameter\n\nEach parameter has several options, only some may apply to certain data types:\n\n* __required__ - is this required (bool)\n* __type__ - data type\n* __regex__ - should the value match a regular expression? (e.g. '[0-9]{2}[a-zA-Z]{3})\n* __default__ - a default value if left blank\n* __values__ - if type=enum, a Javascript array of allowed values ([\"one\", \"two\", \"three\"])\n* __min/max__ - minimum/maximum value (for 'int' and 'float' types)\n* __min_length/max_length__ - minimum/maximum length for strings\n* __description__ - description of the parameter\n* __example__ - example value\n\n## Data types\n* __string__\n* __int__\n* __float__\n* __date__ - can be expressed as a date (YYYY-MM-DD hh:mm:ss) or as an interval (3 months/2 days/5 years/-5 days)\n* __bool__\n* __collection__ - essentially an array, expressed as a Javascript array ([\"james\", \"scott\", \"dave\"])\n* __number collection__ - a collection that only allows numbers as values\n* __date collection__ - a collection that only allows dates as values\n* __enum__ - use in conjunction with 'values' to determine a group of allowed values\n* __url_ - only allows valid URLs as values\n* __email__ - only allows valid email addresses as values\n\n## Express compatibility\nRESTly is based on the excellent Express framework. Because of this, all routes and endpoints can be defined the same as you would in Express, and you can also use any existing Express middleware, or of course create your own.\n\nTo use middleware:\n```\nvar restly = require('restly');\nrestly.use(middleware.someMethod());\nrestly.init('./routes.json', {lib: \"includes/\"});\n```\n\nNOTE: RESTly uses the express.bodyParser middleware internally already, as so:\n\n```\nexpress.bodyParser({ keepExtensions: true, uploadDir: '/tmp' })\n```\n\n## Add authentication\nAdd an 'authentication' section to your 'routes.json' file. This is defined very much like a standard route:\n```\n{\n  \"authentication\": {\n    \"standard\": {\n      \"name\": \"Standard authentication\",\n      \"library\": \"authentication.js\",\n      \"callback\": \"standardAuth\",\n      \"parameters\": {\n        \"api_key\": {\n          \"required\": true,\n          \"type\": \"string\",\n          \"description\": \"Your API key\",\n          \"example\": \"sad7864hjsdf7\"\n        }\n      }\n    }\n  },\n  \"routes\": [\n    ....\n  ]\n}\n```\nAnd specify which authentication method you would like to use for each individual route (optional):\n```\n\"routes\": [\n    {\n      \"title\": \"Example API call\",\n      \"description\": \"Example API call\",\n      \"authentication\": \"standard\",\n      \"section\": \"General API Calls\",\n      \"endpoint\": \"/example\",\n      \"method\": \"get\",\n      \"library\": \"example.js\",\n      \"callback\": \"getExample\",\n      \"parameters\": {\n        ...\n      }\n    }\n  ]\n```\nAuthentication parameters will be added to the route and passed to the authentication callback first. If this callback does not return an error, the standard route callback is called in the usual way.\n\nAuthentication modules should be created in the same way as standard modules.\n\n## Add caching (requires [Redis](http://www.redis.io/) to be installed)\nTo turn caching on, do this (By default, RESTly will use Redis on localhost with the default port):\n```\nrestly.init('./routes.json', {lib: \"includes/\", caching: true}); // using defaults\nrestly.init('./routes.json', {lib: \"includes/\", caching: \"redis://host.for.redis.com:1337\"}); // specify the host and the port\nrestly.init('./routes.json', {lib: \"includes/\", caching: \"redis://host.for.redis.com\"}); // just change the host\n```\n\nIn a route definition, add a caching option (bool) to turn caching on or off.\n```\n\"routes\": [\n    {\n      \"title\": \"Example API call\",\n      \"description\": \"Example API call\",\n      \"authentication\": \"standard\",\n      \"caching\": \"true\",\n      \"section\": \"General API Calls\",\n      \"endpoint\": \"/example\",\n      \"method\": \"get\",\n      \"library\": \"example.js\",\n      \"callback\": \"getExample\",\n      \"parameters\": {\n        ...\n      }\n    }\n  ]\n```\n\nTurning caching on for a particular route will add a special parameter '_use_cache', which defaults to true. This can be set to false in order to avoid the cache.\n\n## Documentation\n\nDocs are auto generated and by default are located at the top level of your API (e.g. http://localhost:8000/). You can change the 'docs_endpoint' init option to alter this.\n\n![Docs](https://raw.github.com/MattCollins84/restly/master/images/docs.png)",
  "readmeFilename": "README.md",
  "_id": "restly@0.1.0",
  "dist": {
    "shasum": "02884eaa9387d9b5d266af5c0ef5985cc716a4e4"
  },
  "_from": "restly@",
  "_resolved": "https://registry.npmjs.org/restly/-/restly-0.1.0.tgz"
}
